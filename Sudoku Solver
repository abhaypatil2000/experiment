#include<iostream>
#include<bits/stdc++.h>
#include<conio.h>
using namespace std;


int grid[9][9] = { {3, 0, 6, 5, 0, 8, 4, 0, 0},
					  {5, 2, 0, 0, 0, 0, 0, 0, 0},
					  {0, 8, 7, 0, 0, 0, 0, 3, 1},
					  {0, 0, 3, 0, 1, 0, 0, 8, 0},
					  {9, 0, 0, 8, 6, 3, 0, 0, 5},
					  {0, 5, 0, 0, 9, 0, 6, 0, 0},
					  {1, 3, 0, 0, 0, 0, 2, 5, 0},
					  {0, 0, 0, 0, 0, 0, 0, 7, 4},
					  {0, 0, 5, 2, 0, 6, 3, 0, 0} };

void printgrid()
{
	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			cout << grid[i][j] << " ";
		}
		cout << "\n";
	}
}

bool possible(int x, int y, int num)
{
	for (int i = 0; i < 9; i++)
	{
		if (grid[x][i] == num || grid[i][y] == num)
		{
			return false;
		}
	}
	int x1, y1;
	x1 = x / 3;
	y1 = y / 3;

	x1 = x1 * 3;
	y1 = y1 * 3;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (grid[x1 + i][y1 + j] == num)
				return false;
		}
	}

	return true;
}

bool solve(int x, int y)
{
	if (y == 9)
	{
		y = y - 9;
		x++;
	}
	if (x == 9)
	{
		return true;
	}
	if (grid[x][y] == 0)
	{
		for (int k = 1; k <= 9; k++)
		{
			if (possible(x, y, k))
			{
				grid[x][y] = k;
				if (solve(x, y + 1))
				{
					return true;
				}
				printgrid();
				cout << "\033[2J\033[1;1H";
				grid[x][y] = 0;
			}
		}
		printgrid();
		cout << "\033[2J\033[1;1H";
		return false;
	}
	return solve(x, y + 1);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	solve(0, 0);
	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			cout << grid[i][j] << " ";
		}
		cout << "\n";
	}
}
